// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto;
class depth_m;
class depth_mDefaultTypeInternal;
extern depth_mDefaultTypeInternal _depth_m_default_instance_;
class image;
class imageDefaultTypeInternal;
extern imageDefaultTypeInternal _image_default_instance_;
class vel;
class velDefaultTypeInternal;
extern velDefaultTypeInternal _vel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::depth_m* Arena::CreateMaybeMessage<::depth_m>(Arena*);
template<> ::image* Arena::CreateMaybeMessage<::image>(Arena*);
template<> ::vel* Arena::CreateMaybeMessage<::vel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:image) */ {
 public:
  image();
  virtual ~image();

  image(const image& from);
  image(image&& from) noexcept
    : image() {
    *this = ::std::move(from);
  }

  inline image& operator=(const image& from) {
    CopyFrom(from);
    return *this;
  }
  inline image& operator=(image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const image* internal_default_instance() {
    return reinterpret_cast<const image*>(
               &_image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(image& a, image& b) {
    a.Swap(&b);
  }
  inline void Swap(image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline image* New() const final {
    return CreateMaybeMessage<image>(nullptr);
  }

  image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const image& from);
  void MergeFrom(const image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required bytes image_data = 3;
  bool has_image_data() const;
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class depth_m :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depth_m) */ {
 public:
  depth_m();
  virtual ~depth_m();

  depth_m(const depth_m& from);
  depth_m(depth_m&& from) noexcept
    : depth_m() {
    *this = ::std::move(from);
  }

  inline depth_m& operator=(const depth_m& from) {
    CopyFrom(from);
    return *this;
  }
  inline depth_m& operator=(depth_m&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const depth_m& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const depth_m* internal_default_instance() {
    return reinterpret_cast<const depth_m*>(
               &_depth_m_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(depth_m& a, depth_m& b) {
    a.Swap(&b);
  }
  inline void Swap(depth_m* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depth_m* New() const final {
    return CreateMaybeMessage<depth_m>(nullptr);
  }

  depth_m* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depth_m>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const depth_m& from);
  void MergeFrom(const depth_m& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depth_m* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depth_m";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 1,
  };
  // required float d = 1;
  bool has_d() const;
  void clear_d();
  float d() const;
  void set_d(float value);

  // @@protoc_insertion_point(class_scope:depth_m)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float d_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class vel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vel) */ {
 public:
  vel();
  virtual ~vel();

  vel(const vel& from);
  vel(vel&& from) noexcept
    : vel() {
    *this = ::std::move(from);
  }

  inline vel& operator=(const vel& from) {
    CopyFrom(from);
    return *this;
  }
  inline vel& operator=(vel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const vel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const vel* internal_default_instance() {
    return reinterpret_cast<const vel*>(
               &_vel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(vel& a, vel& b) {
    a.Swap(&b);
  }
  inline void Swap(vel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vel* New() const final {
    return CreateMaybeMessage<vel>(nullptr);
  }

  vel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const vel& from);
  void MergeFrom(const vel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
    kVzFieldNumber = 3,
    kRzFieldNumber = 4,
  };
  // required float vx = 1;
  bool has_vx() const;
  void clear_vx();
  float vx() const;
  void set_vx(float value);

  // required float vy = 2;
  bool has_vy() const;
  void clear_vy();
  float vy() const;
  void set_vy(float value);

  // required float vz = 3;
  bool has_vz() const;
  void clear_vz();
  float vz() const;
  void set_vz(float value);

  // required float rz = 4;
  bool has_rz() const;
  void clear_rz();
  float rz() const;
  void set_rz(float value);

  // @@protoc_insertion_point(class_scope:vel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vx_;
  float vy_;
  float vz_;
  float rz_;
  friend struct ::TableStruct_image_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// image

// required int32 width = 1;
inline bool image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void image::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 image::width() const {
  // @@protoc_insertion_point(field_get:image.width)
  return width_;
}
inline void image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
  // @@protoc_insertion_point(field_set:image.width)
}

// required int32 height = 2;
inline bool image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void image::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 image::height() const {
  // @@protoc_insertion_point(field_get:image.height)
  return height_;
}
inline void image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
  // @@protoc_insertion_point(field_set:image.height)
}

// required bytes image_data = 3;
inline bool image::has_image_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void image::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& image::image_data() const {
  // @@protoc_insertion_point(field_get:image.image_data)
  return image_data_.GetNoArena();
}
inline void image::set_image_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:image.image_data)
}
inline void image::set_image_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:image.image_data)
}
inline void image::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:image.image_data)
}
inline void image::set_image_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:image.image_data)
}
inline std::string* image::mutable_image_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:image.image_data)
  return image_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* image::release_image_data() {
  // @@protoc_insertion_point(field_release:image.image_data)
  if (!has_image_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void image::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:image.image_data)
}

// -------------------------------------------------------------------

// depth_m

// required float d = 1;
inline bool depth_m::has_d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_m::clear_d() {
  d_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float depth_m::d() const {
  // @@protoc_insertion_point(field_get:depth_m.d)
  return d_;
}
inline void depth_m::set_d(float value) {
  _has_bits_[0] |= 0x00000001u;
  d_ = value;
  // @@protoc_insertion_point(field_set:depth_m.d)
}

// -------------------------------------------------------------------

// vel

// required float vx = 1;
inline bool vel::has_vx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vel::clear_vx() {
  vx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float vel::vx() const {
  // @@protoc_insertion_point(field_get:vel.vx)
  return vx_;
}
inline void vel::set_vx(float value) {
  _has_bits_[0] |= 0x00000001u;
  vx_ = value;
  // @@protoc_insertion_point(field_set:vel.vx)
}

// required float vy = 2;
inline bool vel::has_vy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vel::clear_vy() {
  vy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float vel::vy() const {
  // @@protoc_insertion_point(field_get:vel.vy)
  return vy_;
}
inline void vel::set_vy(float value) {
  _has_bits_[0] |= 0x00000002u;
  vy_ = value;
  // @@protoc_insertion_point(field_set:vel.vy)
}

// required float vz = 3;
inline bool vel::has_vz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vel::clear_vz() {
  vz_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float vel::vz() const {
  // @@protoc_insertion_point(field_get:vel.vz)
  return vz_;
}
inline void vel::set_vz(float value) {
  _has_bits_[0] |= 0x00000004u;
  vz_ = value;
  // @@protoc_insertion_point(field_set:vel.vz)
}

// required float rz = 4;
inline bool vel::has_rz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void vel::clear_rz() {
  rz_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float vel::rz() const {
  // @@protoc_insertion_point(field_get:vel.rz)
  return rz_;
}
inline void vel::set_rz(float value) {
  _has_bits_[0] |= 0x00000008u;
  rz_ = value;
  // @@protoc_insertion_point(field_set:vel.rz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_2eproto
